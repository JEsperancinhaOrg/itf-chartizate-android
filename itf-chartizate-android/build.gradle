apply plugin: 'com.android.library'
apply plugin: 'jacoco'

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        google()
        maven { url 'https://jitpack.io' }
    }
}


task wrapper(type: Wrapper) {
    gradleVersion = '8.0.2'
}


android {
    namespace 'org.jesperancinha.chartizate'

    defaultConfig {
        compileSdk 33
        minSdkVersion 29
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"
        maxSdkVersion 33
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = '17'
        targetCompatibility = '17'
    }
    lintOptions {
        abortOnError false
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/LICENSE-notice.md'
    }
    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'org.jesperancinha.itf:itf-chartizate-api:5.0.1'
    implementation 'com.android.support:multidex:1.0.3'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    testImplementation 'org.mockito:mockito-core:5.4.0'
    androidTestImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    androidTestImplementation 'org.assertj:assertj-core:3.24.2'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'org.mockito:mockito-android:5.5.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestUtil 'androidx.test:orchestrator:1.4.2'
}

def siteUrl = 'https://github.com/JEsperancinhaOrg/itf-chartizate-android'
def gitUrl = 'scm:git:https://github.com/JEsperancinhaOrg/itf-chartizate-android.git'

group = "org.jesperancinha.itf"
version = "6.0.1"

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'org.jesperancinha.itf:itf-chartizate-api:5.0.1'
    implementation 'com.android.support:multidex:1.0.3'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    testImplementation 'org.mockito:mockito-core:5.4.0'
    androidTestImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    androidTestImplementation 'org.assertj:assertj-core:3.24.2'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'org.mockito:mockito-android:5.5.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestUtil 'androidx.test:orchestrator:1.4.2'
}


tasks.register('sourcesJar', Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set("sources")
}

tasks.register('javadoc', Javadoc) {
    dependsOn(':itf-chartizate-android:generateReleaseRFile')
    mustRunAfter(':itf-chartizate-android:generateDebugRFile')
    failOnError false
    configurations.implementation.setCanBeResolved(true)
    configurations.implementation.resolve()
    classpath += configurations.implementation
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    source = android.sourceSets.main.java.srcDirs
}

afterEvaluate {
    javadoc.classpath += files(android.libraryVariants.collect { variant ->
        variant.javaCompileProvider.get().classpath.files
    })
}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier.set("javadoc")
    from(tasks.javadoc.destinationDir)
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    finalizedBy(jacocoTestReport)
}

tasks.register('jacocoTestReport', JacocoReport) {
    dependsOn tasks.withType(Test)
    reports {
        xml.required = true
        csv.required = false
        html.required = false
    }
}




